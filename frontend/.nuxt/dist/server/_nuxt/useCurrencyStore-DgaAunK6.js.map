{"version":3,"file":"useCurrencyStore-DgaAunK6.js","sources":["../../../../pinia/useCurrencyStore.ts"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { ref, computed } from \"vue\";\r\nimport { apiService } from '@/services/api';\r\n\r\ninterface Currency {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  symbol: string;\r\n  rate: number;\r\n  is_default: boolean;\r\n  is_active: boolean;\r\n  decimal_places?: number;\r\n  position?: 'before' | 'after';\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface ExchangeRate {\r\n  from: string;\r\n  to: string;\r\n  rate: number;\r\n  updated_at: string;\r\n}\r\n\r\nexport const useCurrencyStore = defineStore(\"currency\", () => {\r\n  // State\r\n  const currencies = ref<Currency[]>([]);\r\n  const currentCurrency = ref<Currency | null>(null);\r\n  const defaultCurrency = ref<Currency | null>(null);\r\n  const exchangeRates = ref<ExchangeRate[]>([]);\r\n  const isLoading = ref<boolean>(false);\r\n  const error = ref<string | null>(null);\r\n\r\n  // Computed\r\n  const activeCurrencies = computed(() => \r\n    currencies.value.filter(currency => currency.is_active)\r\n  );\r\n\r\n  const currentCurrencyCode = computed(() => \r\n    currentCurrency.value?.code || defaultCurrency.value?.code || 'TRY'\r\n  );\r\n\r\n  const currentCurrencySymbol = computed(() => \r\n    currentCurrency.value?.symbol || defaultCurrency.value?.symbol || 'â‚º'\r\n  );\r\n\r\n  // Actions\r\n  const fetchCurrencies = async (activeOnly: boolean = true) => {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await apiService.getCurrencies({ active_only: activeOnly });\r\n      const data = (response as any)?.data ?? response;\r\n\r\n      currencies.value = (data || []).map((currency: any) => ({\r\n        id: currency.id,\r\n        name: currency.name,\r\n        code: currency.code,\r\n        symbol: currency.symbol,\r\n        rate: currency.rate || 1,\r\n        is_default: currency.is_default || false,\r\n        is_active: currency.is_active !== false,\r\n        decimal_places: currency.decimal_places || 2,\r\n        position: currency.position || 'before',\r\n        created_at: currency.created_at || '',\r\n        updated_at: currency.updated_at || ''\r\n      }));\r\n\r\n      // Set default currency if found\r\n      const defaultCur = currencies.value.find(c => c.is_default);\r\n      if (defaultCur) {\r\n        defaultCurrency.value = defaultCur;\r\n      }\r\n\r\n      // Load saved currency from localStorage or use default\r\n      const savedCurrencyCode = process.client ? localStorage.getItem('selectedCurrency') : null;\r\n      if (savedCurrencyCode) {\r\n        const savedCurrency = currencies.value.find(c => c.code === savedCurrencyCode);\r\n        if (savedCurrency) {\r\n          currentCurrency.value = savedCurrency;\r\n        }\r\n      } else if (defaultCur) {\r\n        currentCurrency.value = defaultCur;\r\n      }\r\n\r\n      return currencies.value;\r\n    } catch (err: any) {\r\n      error.value = err.message || 'Failed to fetch currencies';\r\n      console.error('Failed to fetch currencies:', err);\r\n      throw err;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchDefaultCurrency = async () => {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await apiService.getDefaultCurrency();\r\n      const data = (response as any)?.data ?? response;\r\n\r\n      if (data) {\r\n        defaultCurrency.value = {\r\n          id: data.id,\r\n          name: data.name,\r\n          code: data.code,\r\n          symbol: data.symbol,\r\n          rate: data.rate || 1,\r\n          is_default: true,\r\n          is_active: data.is_active !== false,\r\n          decimal_places: data.decimal_places || 2,\r\n          position: data.position || 'before',\r\n          created_at: data.created_at || '',\r\n          updated_at: data.updated_at || ''\r\n        };\r\n\r\n        // Set as current if no current currency is set\r\n        if (!currentCurrency.value) {\r\n          currentCurrency.value = defaultCurrency.value;\r\n        }\r\n      }\r\n\r\n      return defaultCurrency.value;\r\n    } catch (err: any) {\r\n      error.value = err.message || 'Failed to fetch default currency';\r\n      console.error('Failed to fetch default currency:', err);\r\n      throw err;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchExchangeRates = async () => {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await apiService.getExchangeRates();\r\n      const data = (response as any)?.data ?? response;\r\n\r\n      // API returns data.rates as object, convert to array\r\n      if (data && data.rates) {\r\n        exchangeRates.value = Object.entries(data.rates).map(([currency, rate]) => ({\r\n          from: data.base_currency || 'TRY',\r\n          to: currency,\r\n          rate: Number(rate),\r\n          updated_at: data.last_updated || ''\r\n        }));\r\n      } else {\r\n        exchangeRates.value = [];\r\n      }\r\n\r\n      return exchangeRates.value;\r\n    } catch (err: any) {\r\n      error.value = err.message || 'Failed to fetch exchange rates';\r\n      console.error('Failed to fetch exchange rates:', err);\r\n      // Don't throw error for exchange rates, just log it\r\n      exchangeRates.value = [];\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const setCurrency = (currency: Currency) => {\r\n    currentCurrency.value = currency;\r\n    \r\n    // Save to localStorage\r\n    if (process.client) {\r\n      localStorage.setItem('selectedCurrency', currency.code);\r\n    }\r\n  };\r\n\r\n  const convertPrice = (amount: number, fromCode?: string, toCode?: string): number => {\r\n    const from = fromCode || defaultCurrency.value?.code || 'TRY';\r\n    const to = toCode || currentCurrency.value?.code || 'TRY';\r\n\r\n    if (from === to) return amount;\r\n\r\n    // Find exchange rate\r\n    const rate = exchangeRates.value.find(r => r.from === from && r.to === to);\r\n    if (rate) {\r\n      return amount * rate.rate;\r\n    }\r\n\r\n    // Fallback: use currency rates\r\n    const fromCurrency = currencies.value.find(c => c.code === from);\r\n    const toCurrency = currencies.value.find(c => c.code === to);\r\n\r\n    if (fromCurrency && toCurrency) {\r\n      return (amount / fromCurrency.rate) * toCurrency.rate;\r\n    }\r\n\r\n    return amount;\r\n  };\r\n\r\n  const formatPrice = (amount: number, currencyCode?: string): string => {\r\n    const currency = currencyCode \r\n      ? currencies.value.find(c => c.code === currencyCode) \r\n      : currentCurrency.value;\r\n\r\n    if (!currency) return amount.toString();\r\n\r\n    const convertedAmount = convertPrice(amount, defaultCurrency.value?.code, currency.code);\r\n    const formatted = convertedAmount.toFixed(currency.decimal_places || 2);\r\n\r\n    return currency.position === 'after' \r\n      ? `${formatted} ${currency.symbol}`\r\n      : `${currency.symbol} ${formatted}`;\r\n  };\r\n\r\n  const clearError = () => {\r\n    error.value = null;\r\n  };\r\n\r\n  // Initialize currencies on first load\r\n  const initializeCurrencies = async () => {\r\n    if (currencies.value.length === 0 && !isLoading.value) {\r\n      try {\r\n        await Promise.all([\r\n          fetchCurrencies(true),\r\n          fetchExchangeRates()\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error initializing currencies:', error);\r\n        // Don't throw error, let the app continue\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    // State\r\n    currencies,\r\n    currentCurrency,\r\n    defaultCurrency,\r\n    exchangeRates,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Computed\r\n    activeCurrencies,\r\n    currentCurrencyCode,\r\n    currentCurrencySymbol,\r\n    \r\n    // Actions\r\n    fetchCurrencies,\r\n    fetchDefaultCurrency,\r\n    fetchExchangeRates,\r\n    setCurrency,\r\n    convertPrice,\r\n    formatPrice,\r\n    initializeCurrencies,\r\n    clearError\r\n  };\r\n});"],"names":["error"],"mappings":"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"}