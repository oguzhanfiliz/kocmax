{"version":3,"file":"useCategoryStore-D0rUiFR1.js","sources":["../../../../pinia/useCategoryStore.ts"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { ref, computed } from \"vue\";\nimport { apiService } from '@/services/api';\nimport { useAuthStore } from './useAuthStore';\n\ninterface CategoryProduct {\n  id: number;\n  name: string;\n  slug: string;\n  price: number;\n  compare_price?: number;\n  currency: string;\n  image?: string;\n  stock_quantity: number;\n  is_featured: boolean;\n  is_active: boolean;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  parent_id?: number;\n  image?: string;\n  is_active: boolean;\n  level: number;\n  children?: Category[];\n  products_count?: number;\n  products?: CategoryProduct[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface CategoryFilters {\n  parent_id?: number;\n  level?: number;\n  with_products?: boolean;\n  per_page?: number;\n  page?: number;\n}\n\n\nexport const useCategoryStore = defineStore(\"category\", () => {\n  // State\n  const categories = ref<Category[]>([]);\n  const currentCategory = ref<Category | null>(null);\n  const isLoading = ref<boolean>(false);\n  const error = ref<string | null>(null);\n  const meta = ref({\n    current_page: 1,\n    per_page: 20,\n    total: 0,\n    last_page: 1\n  });\n\n  // Computed\n  const hasCategories = computed(() => categories.value.length > 0);\n  const rootCategories = computed(() => \n    categories.value.filter(category => !category.parent_id || category.level === 0)\n  );\n  const categoriesWithChildren = computed(() => \n    categories.value.filter(category => category.children && category.children.length > 0)\n  );\n\n  // Menu-specific state\n  const menuCategories = ref<Category[]>([]);\n  const flatMenuCategories = ref<Category[]>([]);\n  \n  // Featured categories state\n  const featuredCategories = ref<Category[]>([]);\n\n  // Actions\n  const fetchMenuCategories = async (opts?: { withChildren?: boolean; includeNonRoot?: boolean }) => {\n    isLoading.value = true;\n    error.value = null;\n\n    try {\n      const params: any = {};\n      if (opts?.withChildren) params.with_children = 1;\n      if (opts?.includeNonRoot) params.include_non_root = 1;\n\n      const response = await apiService.getMenuCategories(params);\n      const data = (response as any)?.data ?? response;\n\n      const transformed: Category[] = (data || []).map((cat: any) => ({\n        id: cat.id,\n        name: cat.name,\n        slug: cat.slug || cat.name?.toLowerCase()?.replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n        description: cat.description,\n        parent_id: cat.parent_id,\n        image: cat.image_url || cat.image,\n        is_active: cat.is_active !== false,\n        level: cat.level ?? (cat.parent_id ? 1 : 0),\n        children: Array.isArray(cat.children) ? cat.children.map((child: any) => ({\n          id: child.id,\n          name: child.name,\n          slug: child.slug || child.name?.toLowerCase()?.replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n          description: child.description,\n          parent_id: child.parent_id,\n          image: child.image_url || child.image,\n          is_active: child.is_active !== false,\n          level: child.level ?? 1,\n          children: Array.isArray(child.children) ? child.children : [],\n          products_count: child.products_count || 0,\n          products: [],\n          created_at: child.created_at || '',\n          updated_at: child.updated_at || ''\n        })) : [],\n        products_count: cat.products_count || 0,\n        products: [],\n        created_at: cat.created_at || '',\n        updated_at: cat.updated_at || ''\n      }));\n\n      if (opts?.withChildren && !opts?.includeNonRoot) {\n        menuCategories.value = transformed;\n      }\n\n      if (opts?.includeNonRoot) {\n        flatMenuCategories.value = transformed;\n      }\n      return transformed;\n    } catch (err: any) {\n      error.value = err.message || 'Failed to fetch menu categories';\n      console.error('Failed to fetch menu categories:', err);\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  const fetchFeaturedCategories = async (params?: { limit?: number; per_page?: number; page?: number }) => {\n    isLoading.value = true;\n    error.value = null;\n\n    try {\n      const response = await apiService.getFeaturedCategories(params);\n      const data = (response as any)?.data ?? response;\n\n      const transformed: Category[] = (data || []).map((cat: any) => ({\n        id: cat.id,\n        name: cat.name,\n        slug: cat.slug || cat.name?.toLowerCase()?.replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n        description: cat.description,\n        parent_id: cat.parent_id,\n        image: cat.image_url || cat.image,\n        is_active: cat.is_active !== false,\n        level: cat.level ?? (cat.parent_id ? 1 : 0),\n        children: [],\n        products_count: cat.products_count || 0,\n        products: [],\n        created_at: cat.created_at || '',\n        updated_at: cat.updated_at || ''\n      }));\n\n      featuredCategories.value = transformed;\n      return transformed;\n    } catch (err: any) {\n      error.value = err.message || 'Failed to fetch featured categories';\n      console.error('Failed to fetch featured categories:', err);\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  const fetchCategories = async (filterParams?: CategoryFilters) => {\n    isLoading.value = true;\n    error.value = null;\n\n    try {\n      const authStore = useAuthStore();\n      const token = authStore.isAuthenticated ? (authStore.token || undefined) : undefined;\n      \n      const params = {\n        per_page: 100, // Get more categories for menu\n        with_products: true, // Include product count\n        ...filterParams\n      };\n\n      const response = await apiService.getCategories(params, token);\n      \n      // Transform API response to match our interface\n      const transformedCategories = response.data.map((cat: any) => ({\n        id: cat.id,\n        name: cat.name,\n        slug: cat.slug || cat.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n        description: cat.description,\n        parent_id: cat.parent_id,\n        image: cat.image || cat.image_url,\n        is_active: cat.is_active !== false,\n        level: cat.level || 0,\n        children: [],\n        products_count: cat.products_count || 0,\n        created_at: cat.created_at,\n        updated_at: cat.updated_at\n      }));\n\n      // Build hierarchical structure\n      const categoryMap = new Map();\n      const rootCategories: Category[] = [];\n\n      // First pass: create map and identify roots\n      transformedCategories.forEach(cat => {\n        categoryMap.set(cat.id, cat);\n        if (!cat.parent_id) {\n          rootCategories.push(cat);\n        }\n      });\n\n      // Second pass: build children relationships\n      transformedCategories.forEach(cat => {\n        if (cat.parent_id && categoryMap.has(cat.parent_id)) {\n          const parent = categoryMap.get(cat.parent_id);\n          if (!parent.children) parent.children = [];\n          parent.children.push(cat);\n        }\n      });\n\n      categories.value = transformedCategories;\n      if (response.meta) {\n        meta.value = response.meta;\n      }\n      \n      return response;\n    } catch (err: any) {\n      error.value = err.message || 'Failed to fetch categories';\n      console.error('Failed to fetch categories:', err);\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  // Fetch categories with subcategories\n  const fetchCategoriesWithChildren = async () => {\n    isLoading.value = true;\n    error.value = null;\n\n    try {\n      const authStore = useAuthStore();\n      const token = authStore.isAuthenticated ? (authStore.token || undefined) : undefined;\n\n      const allCategoriesResponse = await apiService.getCategories({\n        per_page: 200,\n        with_products: true\n      }, token);\n\n      // Transform and build hierarchy\n      const allCategories = allCategoriesResponse.data.map((cat: any) => ({\n        id: cat.id,\n        name: cat.name,\n        slug: cat.slug || cat.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n        description: cat.description,\n        parent_id: cat.parent_id,\n        image: cat.image || cat.image_url,\n        is_active: cat.is_active !== false,\n        level: cat.level || (cat.parent_id ? 1 : 0),\n        children: [],\n        products_count: cat.products_count || 0,\n        products: [],\n        created_at: cat.created_at,\n        updated_at: cat.updated_at\n      }));\n\n      // Build hierarchical structure\n      const categoryMap = new Map<number, Category>();\n      const rootCategories: Category[] = [];\n\n      // Create map\n      allCategories.forEach((cat: Category) => {\n        categoryMap.set(cat.id, { ...cat, children: [], products: [] });\n      });\n\n      // Build hierarchy\n      allCategories.forEach((cat: Category) => {\n        const categoryWithChildren = categoryMap.get(cat.id)!;\n        \n        if (cat.parent_id && categoryMap.has(cat.parent_id)) {\n          const parent = categoryMap.get(cat.parent_id)!;\n          parent.children!.push(categoryWithChildren);\n        } else {\n          rootCategories.push(categoryWithChildren);\n        }\n      });\n\n      // Now fetch products for each category\n      await Promise.allSettled(\n        Array.from(categoryMap.values()).map(async (category) => {\n          try {\n            const productsResponse = await apiService.getProducts({\n              category_id: category.id,\n              per_page: 10,\n              currency: 'TRY'\n            }, token);\n\n            if (productsResponse?.data && productsResponse.data.length > 0) {\n              category.products = productsResponse.data.map((product: any) => ({\n                id: product.id,\n                name: product.name,\n                slug: product.slug || product.name.toLowerCase().replace(/\\s+/g, '-'),\n                price: typeof product.price === 'object' ? product.price.original : product.price || 0,\n                compare_price: typeof product.compare_price === 'object' ? product.compare_price.original : product.compare_price,\n                currency: product.currency || 'TRY',\n                image: product.images && product.images.length > 0 ? product.images[0] : product.image,\n                stock_quantity: product.stock_quantity || 0,\n                is_featured: product.is_featured || false,\n                is_active: product.is_active !== false\n              }));\n              \n              // Update products count\n              category.products_count = productsResponse.data.length;\n            } else {\n              category.products = [];\n              category.products_count = 0;\n            }\n          } catch (productError) {\n            console.error(`Failed to fetch products for category ${category.name}:`, productError);\n            category.products = [];\n            category.products_count = 0;\n          }\n        })\n      );\n\n      // Store all categories and update computed values\n      categories.value = Array.from(categoryMap.values());\n      \n      if (allCategoriesResponse.meta) {\n        meta.value = allCategoriesResponse.meta;\n      }\n\n      console.log('Categories with hierarchy and products loaded:', {\n        total: categories.value.length,\n        roots: rootCategories.length,\n        withChildren: rootCategories.filter(cat => cat.children && cat.children.length > 0).length,\n        withProducts: categories.value.filter(cat => cat.products && cat.products.length > 0).length\n      });\n      \n      return allCategoriesResponse;\n    } catch (err: any) {\n      error.value = err.message || 'Failed to fetch categories with children';\n      console.error('Failed to fetch categories with children:', err);\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  const fetchCategory = async (id: number) => {\n    isLoading.value = true;\n    error.value = null;\n\n    try {\n      const authStore = useAuthStore();\n      const token = authStore.isAuthenticated ? (authStore.token || undefined) : undefined;\n\n      const response = await apiService.getCategory(id, token);\n      \n      currentCategory.value = {\n        id: response.data.id,\n        name: response.data.name,\n        slug: response.data.slug || response.data.name.toLowerCase().replace(/\\s+/g, '-'),\n        description: response.data.description,\n        parent_id: response.data.parent_id,\n        image: response.data.image,\n        is_active: response.data.is_active !== false,\n        level: response.data.level || 0,\n        children: response.data.children || [],\n        products_count: response.data.products_count || 0,\n        created_at: response.data.created_at,\n        updated_at: response.data.updated_at\n      };\n      \n      return response;\n    } catch (err: any) {\n      error.value = err.message || 'Failed to fetch category';\n      console.error('Failed to fetch category:', err);\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  // Helper functions\n  const getCategoryBySlug = (slug: string) => {\n    return categories.value.find(category => category.slug === slug);\n  };\n\n  const getCategoriesByParent = (parentId: number) => {\n    return categories.value.filter(category => category.parent_id === parentId);\n  };\n\n  const clearError = () => {\n    error.value = null;\n  };\n\n  return {\n    // State\n    categories,\n    currentCategory,\n    menuCategories,\n    flatMenuCategories,\n    featuredCategories,\n    isLoading,\n    error,\n    meta,\n    \n    // Computed\n    hasCategories,\n    rootCategories,\n    categoriesWithChildren,\n    \n    // Actions\n    fetchCategories,\n    fetchCategoriesWithChildren,\n    fetchMenuCategories,\n    fetchFeaturedCategories,\n    fetchCategory,\n    getCategoryBySlug,\n    getCategoriesByParent,\n    clearError\n  };\n});\n"],"names":["_b","_a","rootCategories"],"mappings":"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"}